- @title = 'Home'
%h1 The Vertex Database

%p
  VertexDB is a high performance graph database server that supports automatic garbage collection. 
  It uses the HTTP protocol for requests and JSON for it's response data format and the API is 
  inspired by the FUSE filesystem API plus a few extra methods for queries and queues. 

%h2 Performance

%p
  Requests per second are typically network i/o bound and should be in the thousands on OSX, 
  and possibly tens of thousands on Linux (on a typical PC of circa 2008). 

%h2 Integrity

%p
  On startup, VertexDB makes a backup of the database (if it exists). When shut down properly, 
  it creates a file that marks the database as being safely stored. When started, if this file is not found, 
  the database file is replaced by it's old copy. There is also an admin backup request that can be sent 
  to the database to store a backup at any time. 

%h2 Security

%p The current way to secure the server is by running it on an isolated network. HTTP auth support will be added in the future. 

%h2 Applications

%p 
  Graph databases aren't ideal for all uses, but can be more suitable than other models for dealing with 
  changing or informal schemas and data that is more naturally represented as a graph. It's atomic queue APIs 
  can also make vertexdb useful as a high performance persistent queueing server.
  
%h2 Implementation

%p
  The current implementation is in C and built on top of:
  %ul
    %li TokyoCabinet, a b-tree key/value disk store
    %li libevent, for asynchronous sockets and HTTP
    %li Yajl, for JSON generation

%p 
  VertexDB uses a single OS thread and handles all requests serially, but uses async sockets so no request is 
  blocked on socket i/o (though it can still block on disk i/o).

%p 
  Requests should be generally designed such that responses don't spend too much time blocking on disk i/o or 
  using too much memory in queued response buffers. This can be done by "paging" requests by limiting their results 
  count and repeatedly using a query that selects the next set of matches. 

%h2 Future

%p
  Possible future features:
  %ul
    %li FUSE interface
    %li distributed redundant servers
    %li incremental garbage collection
    %li distributed synced in-memory transactions
    %li automatic index creation
    %li a NodeJS implementation which uses JS for queries?